package com.example.music_player_native

import android.Manifest
import android.content.pm.PackageManager
import android.os.Build
import android.widget.Toast
import androidx.annotation.NonNull
import io.flutter.embedding.android.FlutterActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugin.common.MethodChannel
import java.io.File
import android.content.Intent
import android.net.Uri
import android.provider.Settings

class MainActivitycopy : FlutterActivity() {

    companion object {
        private const val REQUEST_READ_EXTERNAL_STORAGE = 123
    }
    private val CHANNEL = "music_player"
    private val mp3FilesList = mutableListOf<String>()
    override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) {
        super.configureFlutterEngine(flutterEngine)

        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler {
                call,
                result ->
            if (call.method == "getMp3Files") {
                getMp3Files()
                result.success(mp3FilesList)
            } else {
                result.notImplemented()
            }
        }
    }

    private fun getMp3Files(directory: File) {
        val files = directory.listFiles()
        files?.forEach { file ->
            if (file.isFile && file.extension.equals("mp3", ignoreCase = true)) {
                mp3FilesList.add(file.absolutePath)
            } else if (file.isDirectory) {
                getMp3Files(file)
            }
        }
    }
    private fun getMp3Files() {
        val permission = Manifest.permission.READ_EXTERNAL_STORAGE
        checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M &&
        ) {
            // Request the permission
            requestPermissions(arrayOf(permission), REQUEST_READ_EXTERNAL_STORAGE)
        } else {
            // Permission already granted, proceed with fetching MP3 files
            val rootFolder = File("/storage/emulated/0/")
            mp3FilesList.clear()
            getMp3Files(rootFolder)
            // You can handle the result here as needed
        }
    }

    override fun onRequestPermissionsResult(
            requestCode: Int,
            permissions: Array<out String>,
            grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_READ_EXTERNAL_STORAGE) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Permission granted, proceed to fetch MP3 files
                getMp3Files()
            } else {
                // Permission denied, inform the user
                Toast.makeText(
                                this,
                                "Permission denied. Cannot access MP3 files.",
                                Toast.LENGTH_SHORT
                        )
                        .show()
                openAppSettings()
            }
        }
    }

    private fun openAppSettings() {
        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
        val uri = Uri.fromParts("package", packageName, null)
        intent.data = uri
        startActivity(intent)
    }
}
